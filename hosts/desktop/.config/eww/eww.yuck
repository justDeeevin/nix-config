;; ** Variables ***********************************************************************

;; System vars
(deflisten VOLUME `nu ./scripts/audio.nu get-vol`)
(deflisten VOLUMEICON `nu ./scripts/audio.nu get-volicon`)
(deflisten MIC `nu ./scripts/audio.nu get-mic`)
(deflisten MICICON `nu ./scripts/audio.nu get-micicon`)


;; Music vars
(deflisten SONG `nu ./scripts/music.nu song`)
(deflisten ARTIST `nu ./scripts/music.nu artist`)
(deflisten STATUS `nu ./scripts/music.nu status`)
(deflisten COVER `nu ./scripts/music.nu cover`)


;; Calendar vars
(defpoll day :interval "20h" "date '+%d'")
(defpoll year :interval "20h" "date '+%Y'")



;; ** Elements **************************************************************************

;; system sliders
(defwidget sys_sliders []
  (box :class "genwin" :vexpand "false" :hexpand "false" :width 325
	(box :class "slidersbox" :orientation "v" :spacing 10 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
	  (box :class "volume_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
		(button :width 30 :onclick "nu ./scripts/audio.nu toggle-vol" 
          (label :class "iconvolume" :text VOLUMEICON))
		(scale :min 0 :max 100 :value VOLUME :active "true" :onchange "nu ./scripts/audio.nu set-vol {}"))
      (box :class "mic_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
		(button :width 30 :onclick "nu ./scripts/audio.nu toggle-mic" 
          (label :class "iconmic" :text MICICON))
		(scale :min 0 :max 100 :value MIC :active "true" :onchange "nu ./scripts/audio.nu set-mic {}"))
      )))


;; Power Button
(defwidget powerbutton []
  (box :class "genwin" :vexpand "false" :hexpand "true"
	(button :class "btn_poweroff" :onclick "nu ./scripts/powermenu.nu" "")))

;; ** Widgets **************************************************************************

;;system
(defwidget system []
    (box :class "row" :orientation "h" :space-evenly "false" :spacing 10 :height 60
      (sys_sliders)
     (powerbutton)
     )
  )


;; Music
(defwidget music []
    (box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
		  
      (box :class "genwin" :orientation "h" :space-evenly "true" :vexpand "false" :hexpand "false"
        (box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
          (box :orientation "v" :width 80
	  	    (label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
	  	    (label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)))

		(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false"
		  (button :class "btn_prev" :onclick "nu ./scripts/music.nu prev" "󰒮 ")
		  (button :class "btn_play" :onclick "nu ./scripts/music.nu toggle" STATUS)
		  (button :class "btn_next" :onclick "nu ./scripts/music.nu next" "󰒭"))))


;; Calendar
(defwidget cal []
	(box :class "genwin" :orientation "v"
	    (calendar :class "cal" :day day :year year)))






;; ** Windows *************************************************************************

(defwindow music0 :stacking "fg" :focusable "false" :monitor 0 :geometry (geometry :anchor "top center" :x 0 :y 0)
  (music))

(defwindow music1 :stacking "fg" :focusable "false" :monitor 1 :geometry (geometry :anchor "top center" :x 0 :y 0)
  (music))


(defwindow calendar0 :stacking "fg" :focusable "false" :monitor 0 :geometry (geometry :anchor "top right" :x 0 :y 0)
  (cal)
)

(defwindow calendar1 :stacking "fg" :focusable "false" :monitor 1 :geometry (geometry :anchor "top right" :x 0 :y 0)
    (cal)
)
